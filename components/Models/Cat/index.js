/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: the Show Orange (https://sketchfab.com/orangetheshow)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/cat-is2-670791315b634cb0b1f59cbfe7cff3e4
title: Cat IS2
*/

import React, { useEffect, useRef, useState, useContext } from 'react'
import { useGLTF, useAnimations, PivotControls } from '@react-three/drei'
import gsap from 'gsap'
import { useFrame } from '@react-three/fiber'
import firstScene from '../../../helpers/helpers'
import { ScrollTrigger } from 'gsap/dist/ScrollTrigger'
import { editable as e } from '@theatre/r3f'
import { AppContext } from '../../../context/appContext'
import { useScroll } from 'framer-motion'

gsap.registerPlugin(ScrollTrigger)

const Cat = ({ scene, demoSheet }) => {
    const group = useRef()
    const { nodes, materials, animations } = useGLTF('./models/cat/scene.gltf')
    const { actions } = useAnimations(animations, group)
    const [position, setPosition] = useState({ x: 0, y: 0.85, z: -5 })
    const { appState, changeStateProject } = useContext(AppContext)
    const [moment, setMoment] = useState('moment2')
    // const [scroll, setScroll] = useState(0)
    // const prevScroll = usePrevious(scroll)

    const { scrollY, scrollYProgress } = useScroll()

    const [aToB, setAToB] = useState('AtoB')
    const [aToF, setAToF] = useState('AtoF')
    const [aToD, setAToD] = useState('A_pole_start')
    const [bToA, setBToA] = useState('BtoA')
    const [cToA, setDToA] = useState('CtoA')

    useEffect(() => {
        console.log('ACTIONS: ', actions)
    }, [])

    /* if (appState.currentStep === 1 ) {
        setTimeout(() => demoSheet.sequence.play(), 2000)
    }*/

    /*function usePrevious(value) {
        const ref = useRef()
        useEffect(() => {
            ref.current = value
        })
        return ref.current
    }*/
    /*
     useEffect(() => {
         if (!scroll && !prevScroll) return

         if (scroll && prevScroll) {
             const difference = scroll - prevScroll

             if (Math.abs(difference) > 0.0001) {
                 setWalk(true)
             } else {
                 setWalk(false)
             }
         }
     }, [scroll])*/

    const [scroll, setScroll] = useState(0)

    useEffect(() => {
        if (appState.currentStep === 1) {
            return scrollYProgress.onChange((latest) => {
                console.log('PROGRESS', parseFloat(latest.toFixed(2)))
                console.log(moment)
                // if (parseFloat(latest.toFixed(2)) === 0.2) {
                //     //scrollY.set(4000, true)
                //     //scrollYProgress.set(0.8, false)
                //     console.log('ENTRA ACA')
                //     //refDiv.current.scrollTo(4000)
                //     window.scrollTo(0, 4000)
                // }
                setScroll(latest)
            })
        }
    }, [])

    useFrame(() => {
        if (appState.currentStep === 1) {
            /*
            // console.log('1:' +scrollY.range(0,1/18)); // 0-6
            // console.log('2:' +scrollY.range(1/18,1/18)); // 18 - 7.5
            // console.log('3:' +scrollY.range(2/18,1/18)); // 7.5 - 13.5
            // console.log('4:' +scrollY.range(3/18,1/18)); // 13.5 - 15,12
            // console.log('5:' +scrollY.range(4/18,1/18)); // 15,12 - 19
            // console.log('6:' +scrollY.range(5/18,1/18)); // 19 - 23
*/
            if (scroll !== 0 && scroll < 6 / 18) {
                demoSheet.sequence.position = scroll * 60
            }
            // if (scroll >= 1 /18 && scroll < 2 /18) {
            //     demoSheet.sequence.position = 6 + scroll * 0.5
            // }

            if (scroll >= 6 / 18) {
                if (moment !== 'moment3') {
                    changeStateProject(3)
                    setMoment('moment3')
                }
            } else {
                if (moment !== 'moment2') {
                    changeStateProject(2)
                    setMoment('moment2')
                }
            }

            if (scroll >= 6/18) {
                demoSheet.sequence.position = (scroll - 0.3333) * 40
            }

            /*
            if (scrollY.range(0, 1 / 18) < 1) demoSheet.sequence.position = scrollY.range(0, 1 / 18) * 6

            if (scrollY.range(0, 1 / 18) === 1 && scrollY.range(1 / 18, 1 / 18) < 1)
                demoSheet.sequence.position = 6 + scrollY.range(1 / 18, 1 / 18) * 0.5

            if (scrollY.range(1 / 18, 1 / 18) === 1 && scrollY.range(2 / 18, 1 / 18) < 1)
                demoSheet.sequence.position = 6.5

            if (scrollY.range(2 / 18, 1 / 18) === 1 && scrollY.range(3 / 18, 1 / 18) < 1)
                demoSheet.sequence.position = 6 + scrollY.range(3 / 18, 1 / 18) * 7

            if (scrollY.range(3 / 18, 1 / 18) === 1 && scrollY.range(4 / 18, 1 / 18) < 1)
                demoSheet.sequence.position = 13.5

            if (scrollY.range(4 / 18, 1 / 18) === 1 && scrollY.range(5 / 18, 1 / 18) < 1)
                {demoSheet.sequence.position = 15.12 + scrollY.range(5 / 18, 1 / 18) * 4.5
            }

            if (scrollY.range(6 / 18, 1)) {
                if (moment !== 'moment3') {
                    changeStateProject(3)
                    setMoment('moment3')
                }
            } else {
                if (moment !== 'moment2') {
                    changeStateProject(2)
                    setMoment('moment2')
                }
            }

            if (scrollY.visible(6 / 18, 4 / 18) && scrollY.range(6 / 18, 4 / 18) < 1){
                demoSheet.sequence.position = scrollY.range(6 / 18, 4 / 18) * 14
            }
            */
        }
    })

    /*prevScroll < scrollY.range(0, 1 / 6)
        ? prevScroll * 7 : scrollY.range(0, 1 / 6) * 7,
    prevScroll < scrollY.range(0, 1 / 6)
        ? scrollY.range(0, 1 / 6) * 7 : prevScroll * 7,*/

    useFrame(() => {
        if (appState.currentStep === 1) {
            //console.log(demoSheet.sequence.position)
        }
    })

    useEffect(() => {
        if (scene === 0) {
            actions?.A_pole_loop.stop()
            actions?.A_idle.play()
            console.log(actions, position, group, scrollY)
            firstScene(actions, position, group, scrollY)
        }
    }, [actions, position, group, scrollY, scene])

    useFrame(({ clock }) => {
        if (scene === 0) {
            const frame = clock.getElapsedTime()
            //console.log(frame);
            if (frame === 5) {
                actions?.A_walk.play()
            }
        }
    })

    // Momento 2 - Proyectos
    useFrame(() => {
        // Inicio - estático
        if (actions && group.current && scene === 1 && group.current.position.z === -242.26) {
            actions?.A_idle.play()
            actions?.A_run.stop()
            actions?.A_walk.stop()
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
        }
        // Yendo hacia primer Tótem
        else if (group.current.position.z > -242.26 && group.current.position.z < -100) {
            actions?.A_idle.stop()
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
            actions?.A_walk.stop()
            actions?.A_run.play()
        }
        // Llegando a 1°T
        else if (group.current.position.z > -100 && group.current.position.z < -63) {
            actions?.A_walk.play()
        }
        // Acercándose a 1°T
        else if (group.current.position.z > -63 && group.current.position.z < -46) {
            actions?.A_run.stop()
            actions?.B_idle.stop()
            actions?.A_walk.play()
        }
        // En 1°T
        else if (group.current.position.z === -44) {
            actions?.A_run.stop()
            actions?.A_walk.stop()
            actions[aToB].setLoop(1, 1)
            actions?.AtoB.play()
            actions?.B_idle.play()
        }
        // Yendo hacia 2°T
        else if (group.current.position.z > -44 && group.current.position.z < 82) {
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
            actions?.A_walk.stop()
            actions?.A_run.play()
        }
        // Llegando a 2°T
        else if (group.current.position.z > 82 && group.current.position.z < 100) {
            actions?.A_walk.play()
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
        }
        // Acercándose a 2°T
        else if (group.current.position.z > 70 && group.current.position.z < 100) {
            actions?.A_run.stop()
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
        }
        // En 2°T
        else if (group.current.position.z === 100) {
            actions?.A_run.stop()
            actions?.A_walk.stop()
            actions[aToF].setLoop(1, 1)
            actions?.AtoF.play()
            actions?.F_idle.play()
        }
        // Yendo hacia 3°T
        else if (group.current.position.z > 100 && group.current.position.z < 210) {
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
            actions?.A_walk.stop()
            actions?.A_run.play()
        }
        // Llegando a 2°T
        else if (group.current.position.z > 205 && group.current.position.z < 220) {
            actions?.A_walk.play()
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
        }
        // Acercándose a 2°T
        else if (group.current.position.z > 216 && group.current.position.z < 220) {
            actions?.A_run.stop()
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
        }
        // En 2°T
        // else if (group.current.position.z === 220) {
        //     actions?.A_run.stop()
        //     actions?.A_walk.stop()
        //     actions[aToD].setLoop(1, 1)
        //     actions?.A_pole_start.play()
        //     actions?.D_idle.play()
        //}
        else if (group.current.position.z === 220) {
            actions?.A_run.stop()
            actions?.A_walk.stop()
            actions[aToB].setLoop(1, 1)
            actions?.AtoB.play()
            actions?.B_idle.play()
        } else if (group.current.position.z > 220) {
            actions?.B_idle.stop()
            actions?.F_idle.stop()
            actions?.D_idle.stop()
            actions?.A_walk.stop()
            actions?.A_run.play()
        }
    })
    /*useEffect(()=> {
        if (actions && group.current && scene === 1){
            group.current.position.y = -2.85
            let timeline = gsap.timeline();
            timeline
            .to(group.current.position, {
                y:group.current.position.y+4,
                duration:2,
                onStart: function () { 
                actions?.A_pole_loop.play()
            },
                onComplete: function () { 
                actions?.A_pole_loop.stop()
            },
            },)
            .to(group.current.position, {
                duration:.3,
                y: group.current.position.y+6,
                z:group.current.position.z+2,
                onStart: function () { 
                actions?.A_jump_start.play()
            },
                onComplete: function () { 
                actions?.A_jump_start.stop()
            },
            },)
            .to(group.current.position, {
                duration:.5,
                y:group.current.position.y+6,
                z:group.current.position.z+4,
                onStart: function () { 
                actions?.A_jump_loop.play()
            },
                onComplete: function () { 
                actions?.A_jump_loop.stop()
            },
            },)
            .to(group.current.position, {
                duration:.9667,
                y:group.current.position.y+4,
                z:group.current.position.z+5,
                onStart: function () { 
                actions?.A_jump_end.play()
            },
                onComplete: function () { 
                actions?.A_jump_end.stop()
            },
            },)
            .to(group.current.position, {
                duration:.5,
                y:group.current.position.y+4,
                z:group.current.position.z+5,
                onStart: function () { 
                actions?.A_idle.play()
            },
                onComplete: function () { 
                actions?.A_idle.stop()
            },
            },)
            .to(group.current.position, {
                duration:1.7,
                y:group.current.position.y+4,
                z:group.current.position.z+10,
                onStart: function () { 
                actions?.A_run.play()
            },
                onComplete: function () { 
                actions?.A_run.stop()
                actions?.A_idle.play()
            },
            },)
            .to(group.current.position, {
                z:group.current.position.z+10.1,
                onComplete: function () { 
                setStartProjects(true)
            },
            },'+=1')
            
            
        }
    },[])*/

    /* useFrame(()=> {
        
        if(startProjects && scene === 1){
            console.log('ctZ '+group.current.position.z);
            console.log('ctX '+group.current.position.x);
            console.log('sc '+scrollY.offset);
             if (scrollY.offset>= 0 && scrollY.offset <= 0.01 ){    
                actions?.F_idle.stop()
                actions?.AtoB.stop()
                actions?.B_idle.stop()
                actions?.A_run.stop()
                actions?.A_idle.play()

            } else if (scrollY.offset>0.01 && scrollY.offset<=0.14) {
                actions?.F_idle.stop()
                actions?.AtoB.stop()
                actions?.B_idle.stop()
                actions?.A_idle.stop()
                actions?.A_run.play()
                group.current.position.z = 5.1 + scrollY.offset*150
            } else if (scrollY.offset>0.14 && scrollY.offset<=0.20) {
                actions?.F_idle.stop()
                actions?.A_run.stop()
                actions[aToB].setLoop(1,1)
                actions?.AtoB.play()
                actions?.B_idle.play()
            } else if (scrollY.offset>0.20 && scrollY.offset<=0.35) {
                actions?.F_idle.stop()
                actions?.B_idle.stop()
                actions[bToA].setLoop(1,1)
                actions?.BtoA.play()
                actions?.A_run.play()
                group.current.position.z = 26.058 + (scrollY.offset-0.20)*180

            } else if (scrollY.offset>0.35) {
                actions?.A_run.stop()
                actions[aToF].setLoop(1,1)
                actions?.AtoF.play()
                actions?.F_idle.play()

            }
            
            
        }
      })*/
    return (
        <e.group theatreKey="Cat" ref={group} position={[position.x, position.y, position.z]} dispose={null}>
            <group name="Sketchfab_Scene">
                <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={860.73}>
                    <group name="153a0d5dcc9149cfb9856363b51a1918fbx" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                        <group name="Object_2">
                            <group name="RootNode">
                                <group name="Object_4">
                                    <primitive object={nodes._rootJoint} />
                                    <group name="Object_6" position={[-0.01, -0.1, 0.22]} scale={1.3} />
                                    <skinnedMesh
                                        castShadow
                                        name="Object_7"
                                        geometry={nodes.Object_7.geometry}
                                        material={materials.cu_cat2_mt}
                                        skeleton={nodes.Object_7.skeleton}
                                    />
                                </group>
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </e.group>
    )
}

useGLTF.preload('/models/cat/scene.gltf')

export default Cat
